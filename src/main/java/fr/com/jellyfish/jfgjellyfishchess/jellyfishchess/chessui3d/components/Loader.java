/**
 * *****************************************************************************
 * Copyright (c) 2015, Thomas.H Warner. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. 
 ******************************************************************************
 */
package fr.com.jellyfish.jfgjellyfishchess.jellyfishchess.chessui3d.components;

import fr.com.jellyfish.jfgjellyfishchess.jellyfishchess.chessui3d.opengl.constants.UI3DConst;
import fr.com.jellyfish.jfgjellyfishchess.jellyfishchess.chessui3d.opengl.interfaces.ProgressObserver;
import fr.com.jellyfish.jfgjellyfishchess.jellyfishchess.time.StopWatch;
import java.awt.Rectangle;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.ImageIcon;

/**
 *
 * @author thw
 */
public class Loader extends javax.swing.JFrame implements ProgressObserver {
    
    /**
     * 
     */
    private final Console3D console;
    
    /**
     * Creates new form Loader
     * @param viewport
     * @param console
     */
    public Loader(final Rectangle viewport, final Console3D console) {
        
        final int width = 300, height = 332;
        this.setSize(width, height);
        this.setLocation((((int) viewport.getWidth()) / 2) - width / 2, 
                (((int) viewport.getHeight()) / 2) - height / 2);
        initComponents();
        
        final int i = ThreadLocalRandom.current().nextInt(0, UI3DConst.LOADER_BG_COLLECTION.length);
        
        final java.net.URL imgURL = getClass().getResource(UI3DConst.LOADER_BG_COLLECTION[i]);
        final ImageIcon img = new javax.swing.ImageIcon(imgURL);
        this.imageLabel.setIcon(img);
        this.console = console;
        
        if (console != null) {
            console.setEnabled(false);
        }
        
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loaderContainerPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        loaderProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setFocusable(false);
        setFocusableWindowState(false);
        setMaximumSize(new java.awt.Dimension(300, 332));
        setMinimumSize(new java.awt.Dimension(300, 332));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setName("loaderFrame"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        loaderContainerPanel.setBackground(new java.awt.Color(0, 0, 0));

        imageLabel.setBackground(new java.awt.Color(0, 0, 0));
        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setAlignmentY(0.0F);
        imageLabel.setDoubleBuffered(true);
        imageLabel.setIconTextGap(0);
        imageLabel.setMaximumSize(new java.awt.Dimension(300, 300));
        imageLabel.setMinimumSize(new java.awt.Dimension(300, 300));
        imageLabel.setPreferredSize(new java.awt.Dimension(300, 300));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("  Jellyfish b0.1 - loading game...");
        jLabel1.setAlignmentY(0.0F);

        javax.swing.GroupLayout loaderContainerPanelLayout = new javax.swing.GroupLayout(loaderContainerPanel);
        loaderContainerPanel.setLayout(loaderContainerPanelLayout);
        loaderContainerPanelLayout.setHorizontalGroup(
            loaderContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loaderContainerPanelLayout.createSequentialGroup()
                .addGroup(loaderContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        loaderContainerPanelLayout.setVerticalGroup(
            loaderContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loaderContainerPanelLayout.createSequentialGroup()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loaderProgressBar.setBackground(new java.awt.Color(0, 0, 0));
        loaderProgressBar.setValue(10);
        loaderProgressBar.setAlignmentX(0.0F);
        loaderProgressBar.setAlignmentY(0.0F);
        loaderProgressBar.setBorderPainted(false);
        loaderProgressBar.setDoubleBuffered(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loaderContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(loaderProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loaderContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(loaderProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel loaderContainerPanel;
    private javax.swing.JProgressBar loaderProgressBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notifyProgress(final int value, final int maxValue) {
        final int max = this.loaderProgressBar.getMaximum();
        final int tempVal = (max / maxValue) * value;
        this.loaderProgressBar.setValue((int) tempVal);
    }

    @Override
    public void notifyProcessEnd() {
        this.loaderProgressBar.setValue(this.loaderProgressBar.getMaximum());
        new StopWatch(360).delay(null);
        this.setVisible(false);
        this.dispose();
        if (this.console != null) {
            this.console.setVisible(true);
            this.console.setEnabled(true);
        }
    }
    
}
