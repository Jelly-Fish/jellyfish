/*******************************************************************************
 * Copyright (c) 2014, Thomas.H Warner.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this 
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors 
 * may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY 
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *******************************************************************************/

Beta V0.1
*************************************************
JeLLyfish lib & UI developement doc and backlog *
*************************************************
________________________________________________________________________________
////////////////////////////////////////////////////////////////////////////////
BUGZ - TODO's :

- Test serialization of the hole programme (basicly... that's it). Cover all 
functional possibilities. 

- check/use with open critter.
________________________________________________________________________________
////////////////////////////////////////////////////////////////////////////////
ENGINE BUGZ :

________________________________________________________________________________
////////////////////////////////////////////////////////////////////////////////
DEVELOPEMENT STATUS LOGS :

________________________________________________________________________________
////////////////////////////////////////////////////////////////////////////////
SOLVED OR DEAD-END BUGS :

- CheckmateException Only fires when GUI try's to move again (already in checkmate
situation). Fires ok when comming from engine side on a direct check position, or
trying to move another chessman other than King in checkmate situation.
SOLUTION : add oponent king instance to all chessmen including King class.
Check for checkmate situation if oponent king is checked after isValidMove(...).
Add gui as checkmate observer (CheckmateObserver interface) to all chessmen.

- prevent gui moving after gui moves until engine has finished move.
DONE : booleans.

- Knight can move and let king in checked situation :
position startpos moves d2d4 d7d5 g1f3 b8c6 e2e4 d5e4 f3h4 d8d4 d1e2 g7g5 h4f5 c8f5 b1c3 e8c8 c1e3 d4b4 c3e4 
go depth 10
bestmove e2b5 ponder e7e6
Throwing checkmate exception with Black Rook and Queen :
jellyfish.exceptions.CheckmateException: white King is checkmate!
	at jellyfish.entities.chessmen.King.evaluateKingCheckmateSituation(King.java:435)
	at jellyfish.entities.chessmen.ChessMan.move(ChessMan.java:335)
	at jellyfish.game.ChessGame.executeMove(ChessGame.java:145)
	at chessgui.guidriver.GUIDriver.engineMoved(GUIDriver.java:1115)
	at jellyfish.uci.externalengine.IOExternalEngine.sendEngineUCIMessage(IOExternalEngine.java:292)
	at jellyfish.uci.externalengine.IOExternalEngine.access$300(IOExternalEngine.java:56)
	at jellyfish.uci.externalengine.IOExternalEngine$1.run(IOExternalEngine.java:202)
	at java.lang.Thread.run(Thread.java:744)
SOLUTION :
In ChessMan class's move(...) :
if (!(posTo.getOnPositionChessMan() instanceof King)) {               
    if (posTo.getOnPositionChessMan().getChessMansKing(
            ).evaluateKingInCheckSituation(BoardConst.coordinatesIntegerMap.get(
            posTo.getOnPositionChessMan().getChessMansKing(
            ).getBoardPosition().toString()), false)) {
        // Move must be blocked : King is still in checked status.
On second if, posFrom (now it's posTo) was used and therefor check was corrupted in certain
situations. Before this if(posTo...) the move has been validated by isValidMove(...)
and the positions moved : 
ChessMan rollback = posTo.getOnPositionChessMan();
// Validate and execute move.
this.setBoardPosition(posTo);
posTo.setOnPositionChessMan(this);
posFrom.setOnPositionChessMan(new NullChessMan()); 
The rollback is executed is King is in check situation... See ChessMan move(...)
which is called by all sub classes on a move by GUI or engine.

- Add to menubar an ON/OFF 'reload previous game'. DONE.

- When right click for popup menu on board container the event still moves the board
as for a left click. Put condition if left click on board moving, also set a custom
cursor on mouse over board container. DONE.

- NullPointer on Layout at startup ??? SOLUTION : Clear the gameMoves TreeMap in 
GameStatus class before puttingAll() and serializing it fgs... :S
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
	at javax.swing.text.FlowView$FlowStrategy.layoutRow(FlowView.java:563)
	at javax.swing.text.FlowView$FlowStrategy.layout(FlowView.java:477)
	at javax.swing.text.FlowView.layout(FlowView.java:201)
	at javax.swing.text.BoxView.setSize(BoxView.java:397)
	at javax.swing.text.BoxView.updateChildSizes(BoxView.java:366)
	at javax.swing.text.BoxView.setSpanOnAxis(BoxView.java:348)
	at javax.swing.text.BoxView.layout(BoxView.java:708)
	at javax.swing.text.BoxView.setSize(BoxView.java:397)
	at javax.swing.plaf.basic.BasicTextUI$RootView.setSize(BasicTextUI.java:1714)
	at javax.swing.plaf.basic.BasicTextUI.modelToView(BasicTextUI.java:1046)
	at javax.swing.text.DefaultCaret.repaintNewCaret(DefaultCaret.java:1311)
	at javax.swing.text.DefaultCaret$1.run(DefaultCaret.java:1290)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:733)
	at java.awt.EventQueue.access$200(EventQueue.java:103)
	at java.awt.EventQueue$3.run(EventQueue.java:694)
	at java.awt.EventQueue$3.run(EventQueue.java:692)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:703)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:242)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:161)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:150)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:146)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:91)

- In GUIDriver class, when init chessmen layout, GUIConst.'type' is used and by 
default when the UI starts up it is type CLASSIC_TWO that is used : use a setup
serializable class for saving prefs on start up. DONE : see chessgui.guistatus 
package & GUIDriver class + starter for details.

- review mayUseCastling for King: if King has been in check situation already and
castling is valid, King is allowed to castle : meaning if the King has been checked
previously it doesn't mean it can't castle latter...
SEE param 2 of evaluateKingInCheckSituation(...) boolean <isKingMove> is not 
necessary. Property mayUseCastling is therefor perhaps not necessary.
- Stockfish blocked after A1 castling (King class mayUseCastling setter was never
used on check evaluation or if applyRookKingCastling() in Rook class. All calls to
setMayUseCastling(bool) have been added where required.
SOLUTION : mayUseCastling King class property is now unused and removed.

- Castling : 
Castling is permissible if and only if all of the following conditions hold:
    The king and the chosen rook are on the player's first rank.[3]
    Neither the king nor the chosen rook have previously moved.
    There are no pieces between the king and the chosen rook.
    The king is not currently in check.
    The king does not pass through a square that is attacked by an enemy piece.[4]
    The king does not end up in check. (True of any legal move.)
Conditions 4 through 6 can be summarized with the more memorable phrase: 
"One cannot castle out of, through, or into check."
SCENARIOS :
position startpos moves f2f3 d7d5 g1h3 c8h3 e2e3 h3d7 f1b5 d7b5 e1g1 
go depth 10
bestmove d2d3 ponder e7e6 
>> Castling is allowed (king goes through check with black bishop and engine 
moves white pawn to cover king :X).
SOLUTION[28-04-2014] : when castling check the positions from, to and through using 
evaluateKingInCheckSituation(final Integer[] xyPos, final boolean isKingMove) King 
class method.

- Test "En passant" rule implementation in GUI. SOLUTION :
Tests have been succesful. Code needed to be commented to enable to play with
both sides. Code has been reset.

- Pawn en passant move : implement rules to ChessMan sub class Pawn class.
SOLUTION : see Pawn class isValidMove() Override. 

- king checkmate exception throwing is not working correctly. getKingPossibleMoves
seems to not return the right amout.? Never fired. SOLUTION :
King class evaluateKingSituation() method's second section about checkmate situations
hase been moved to a separate method of abstract class ChessMan and Overrided in King
Class. This method (evaluateKingCheckmateSituation(final Integer[] xyPos) 
throws CheckmateException) is called in ChessMan class's method move() that is
implemented from Movable Interface. It is only called if King is in a check 
situation (King can't be checkmate if he is not already in check).

- engine returns lenght 5 best move on a pawn promotion move (5th is inserted 
chessman type to upgrade too). Guidriver must digest this cmd and engine mdw must 
send a correct move string to engine when also upgrading pawns. Chessman must be 
replaced with correct promotion chessman depending on promotion value 
(queen, rook...). Work on Pawn class, GuiDriver, ChessGame. SOLUTION :
See concerned classes. Pawn promotion is dealt with in GUIDriver class and 
ChessMan abstract class's method move(). A PawnPromotionException may be thrown.

- When starting a new game : crash. Playing blacks, the engine plays blacks first.
Playing whites board is not reset correctly and engine is blocked. ???? SOLUTION :
Restart engine via IOExternalEngine class.

- When GUI black, first move is not added to gameMoves treeMap resulting in engine
 is lost after 3/4 moves. SOLVED : force engine to play and add 1st move.

- king can move from check to ckeck on queen/bishop diagonal attack. Check if
lists stay ordered with addAll(). Check getPositions() for all... works fine with
whites not blacks :X SOLUTION :
All bishop/queen positions where collected using addAll to a global int[] arraylist,
is != null chessman was found and == same color the global loop iteration was
breaked and other diagonal where not checked. In King evaluateKingChecked()
bishop/queen diagonals are now collected in separate lists of diagonals. Iteration 
is done on collection of the 4 different diagonals and when breaking this loop
the iteration moves on to the next diagonal list : all diagonals are covered. 

- No more null pointer but GUI dosent update King icon on castling.
- null pointer on castling when searching for check. SOLUTION :
King updates itself in GUI via return true in isValidMove(). Rook calls observers
(GUI to update) and before King return true (valid move) it applys Rook castling
via Rook's applyRookKingCastling().

- check & checkmate evaluation is not working correctly againt queens.
- ?!!!!? isCapture method always returns false in EngineCMDUtils. buildMovesString()
in same Utils never builds a "capture" move with inserted x and playing with whites
seems to work fine. Yet is condition in isCapture is fixed (!= null && != same color)
engine plays for whites
- InvalidmoveException on avoiding check situation.
SOLUTION :
In King class, bishop queen & rook type attacks where not dealt with correctly.
Example that has been fixed :
if (!ChessBoard.getInstance().getCoordinates().get(
    BoardConst.getPostionFromIntegers(xy)
    ).getOnPositionChessMan().isNullChessMan()) {
    // Here loop has encountered a chess man :
    // Check for attack. If instance of Rook or Queen,
    // king is in check status.

    ChessMan threat = ChessBoard.getInstance().getCoordinates().get(
        BoardConst.getPostionFromIntegers(xy)).getOnPositionChessMan();

    if ((threat instanceof Bishop || threat instanceof Queen)  &&
            !ChessBoard.getInstance().getCoordinates().get(
            BoardConst.getPostionFromIntegers(xy)
            ).getOnPositionChessMan().getCOLOR().equals(this.getCOLOR())) { 
        // Then King is in a check situation and move is invalid.
        return true;
    } else {
        // If for example loop encounters a Rook or Knight, then
        // King is coved by this ChessMan for futher Bishop type 
        // moves. Jump out of loop.
        break;
    }
}
Example with wrong condition display (conditions had to be separated or splited :
if (!ChessBoard.getInstance().getCoordinates().get(
    BoardConst.getPostionFromIntegers(xy)
    ).getOnPositionChessMan().isNullChessMan() &&
    !ChessBoard.getInstance().getCoordinates().get(
    BoardConst.getPostionFromIntegers(xy)
    ).getOnPositionChessMan().getCOLOR().equals(this.getCOLOR())) {
    // Here loop has encountered a chess man :
    // Check for attack. If instance of Rook or Queen,
    // king is in check status.

    ChessMan threat = ChessBoard.getInstance().getCoordinates().get(
        BoardConst.getPostionFromIntegers(xy)).getOnPositionChessMan();

    if (threat instanceof Bishop || threat instanceof Queen) { 
        // Then King is in a check situation and move is invalid.
        return true;
    } else {
        // If for example loop encounters a Rook or Knight, then
        // King is coved by this ChessMan for futher Bishop type 
        // moves. Jump out of loop.
        break;
    }
}

- King can move to a check situation. SOLUTION :
See public boolean kingChecked(final Integer[] xyPos) throws CheckmateException 
in King class. The method gets all possible attack positions and seeks for a check
situation. This method can be used by all sub ChessMan classes when validating 
moves : set bool to true for check if necessary. This will force to unlock check 
on King class and avoid lambda moves will King is in checked status.

- after deblocked check position for king engine crashes. SOLVED BY :
- King can use castling when checked.
- when checked king cannot move :X

- King can use castling when checked. SOLUTION :
In King isValidMove(), when checking for a valid castling move, if castling move
is valid, before return true evaluate King in check. If King is checked invalidate 
move. Once a king has been checked it cannot use castling : set bool mayUseCastling
to false in kingCheckedOrCheckmate().

- when checked king cannot move :X SOLUTION :
When testing valid move for King, just before return trues, call 
kingCheckedOrCheckmate(xyTo). Return false if posTo == check.

URGENT BUG_when engine takes chessman a gui move is triggered. SOLUTION :
With algebraic notation a 'x' character must be inserted between moves. Ex: e4d5
pawn captures pawn must be sent to engine as e4xe5.

URGENT BUG_engine crashes when gui castling. SOLUTION :
Refacto : Castling was sent to GUI via a CastlingException... this has been 
replaced by an Observer pattern between rook and GUI. The King class, if castling,
fires a specific rook's overided Observer method and fires itself the GUI Observer
overided method. GUI updates GUI, Rook updates engine middle ware and king just 
move as on any other move (it can now return true in isValidMove() method, before 
this refactoring king just throwed a CastlingException and it's isValidMove() method
never reached return true toward GUI.

URGENT BUG_Engine crash at move 2 when playing with blacks. SOLUTION :
In a chess game, if openent is playing whites he must take first move...
If GUI is playing whites then when ChessGame class is instanciated in GUIDriver
class it must call IOExternalEngine and force first game move. Then Observs are
notified (GUI moves & updates).

-if king checked other pieces can still move leaving king checked.
-King can move up in fen y to a check state.
-if (!(guiKing instanceof King)) { blocks all chessman sub classes.
FIX : when trying to validate a non check situation on same color king in ChessMan 
class method move() (for all chessman except king) null pointer. SOLUTION :
See King evaluateKingChecked() method and private King methods called in it.
________________________________________________________________________________
////////////////////////////////////////////////////////////////////////////////

