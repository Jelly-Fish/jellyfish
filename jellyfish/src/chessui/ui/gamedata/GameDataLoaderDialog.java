/*******************************************************************************
 * Copyright (c) 2014, Thomas.H Warner.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this 
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors 
 * may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY 
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *******************************************************************************/

package chessui.ui.gamedata;

import chessui.constants.UIConst;
import chessui.constants.MessageConst;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import jellyfish.dto.ChessGameDTO;
import jellyfish.utils.DataUtils;

/**
 * @author Thomas.H Warner 2014
 */
public class GameDataLoaderDialog extends javax.swing.JDialog implements TableModelListener {

    //<editor-fold defaultstate="collapsed" desc="Private vars">  
    /**
     * JTable's data model.
     */
    private DataTableModel dataModel;
    
    /**
     * Data Table.
     */
    private JTable dataTable;
    
    /**
     * file name splitter.
     */
    private final static String UNDER_SCORE = "_";
    
    /**
     * JTable's font family.
     */
    private final static String TABLE_FONT_FAMILY = "Tahoma";
    
    /**
     * Collection of data files absolute paths to delete on window closing evt.
     */
    private final HashMap<String, String> dataFilesToDelete = new HashMap<>();

    /**
     * Selected data file absolute path.
     */
    private String selectedDataFilePath;
    
    /**
     * Selected file description.
     */
    private String selectedDataFileDescription;
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Constructor">
    /**
     * Creates new form GameDataLoaderDialog
     * @param parent
     * @param modal
     */
    public GameDataLoaderDialog(java.awt.Window parent, final ModalityType modal) {
        
        super(parent, modal);
        
        loadContent();
        initComponents();
        initDataTable();
        dataTableStyle();
        
        java.net.URL imgURL = getClass().getResource(UIConst.JELLYFISH_FRAME_ICON);
        javax.swing.ImageIcon img = new javax.swing.ImageIcon(imgURL);
        this.setIconImage(img.getImage());
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Generated code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Game history");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(80, 92, 92));
        setMinimumSize(new java.awt.Dimension(200, 120));
        setName("gameDataDialog"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogWindowClosing(evt);
            }
        });

        scrollPane.setBackground(new java.awt.Color(80, 92, 92));
        scrollPane.setBorder(null);
        scrollPane.setDoubleBuffered(true);
        scrollPane.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Perform actions on window closing.
     * @param evt 
     */
    private void dialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogWindowClosing
        
        if (dataFilesToDelete.size() > 0) {
            
            StringBuilder fileInfo = new StringBuilder();
            for (Entry<String, String> entry : dataFilesToDelete.entrySet()) {
                fileInfo.append(entry.getKey());
                fileInfo.append(MessageConst.BACK_SLASH_N);
            }

            Object[] options = MessageConst.OK_CANCEL_OPTIONS;
            int result = javax.swing.JOptionPane.showOptionDialog(this,
                String.format(MessageConst.DELETE_DATA_FILES_TEXT, fileInfo.toString()),
                    MessageConst.DELETE_DATA_FILES_TITLE,
                    javax.swing.JOptionPane.YES_NO_OPTION,
                    javax.swing.JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]);

            if (result == 0) {
                try {
                    DataUtils.deleteDataFiles(dataFilesToDelete.values());
                } catch (java.io.IOException ex) {
                    Logger.getLogger(GameDataLoaderDialog.class.getName()).log(Level.SEVERE, null, ex);
                    javax.swing.JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        MessageConst.DELETE_DATA_FILES_ERR_TITLE,
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        this.dispose();
    }//GEN-LAST:event_dialogWindowClosing
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Events">
    @Override
    public void tableChanged(final TableModelEvent e) {
        
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel)e.getSource();
        final String columnName = model.getColumnName(column);
        final String path = (String)model.getValueAt(row, 5);
        final String fen = (String)model.getValueAt(row, 3);
        final String date = (String)model.getValueAt(row, 0);
        final boolean addToHashMap = (Boolean)model.getValueAt(row, 6);
        
        if (addToHashMap) {
            this.dataFilesToDelete.put(date + MessageConst.STR_SPACE + fen, (String)path);
        } else {
            if (this.dataFilesToDelete.containsValue(path)) {
                this.dataFilesToDelete.remove(date + MessageConst.STR_SPACE + fen);
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Methods">    
    /**
     * @return ChessGameDTO instance
     */
    public String[] showDialog() {
        String[] data = { this.selectedDataFilePath, this.selectedDataFileDescription };
        return data;
    }
    
    /**
     * Load data to list.
     */
    private void loadContent() {

        Object[] columnNames = { "game date-time", "moves", "color played", 
            "fen position", "elapsed time hh:mm:ss", "file location", "delete on close" }; 
        int counter = 0;
        Object[][] data = null;
        
        // Move all .snapshots files to new directory.
        File gameDataFile = new File(UIConst.GAME_DATA_BACKUP_DIR_PATH);
        if (gameDataFile.isDirectory()) {
            
            File[] games = gameDataFile.listFiles();
            data = new Object[games.length][7];
            ChessGameDTO dto = null;
            
            // If there are no game xmlfiles to load, dta stay's null but is
            // nerver used.
            for (File game : games) {
                
                try {
                    dto = DataUtils.getGameData(game.getAbsolutePath());
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(GameDataLoaderDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
                if (dto != null) {
                    data[counter][0] = dto.getDate();
                    data[counter][1] = dto.getMoveCount();
                    data[counter][2] = dto.getColor();
                    data[counter][3] = dto.getFenMoves().values().toArray()[dto.getMoveCount() - 1];
                    data[counter][4] = dto.getTimeStr();
                    data[counter][5] = game.getAbsolutePath();
                    data[counter][6] = false;
                }
                ++counter;
            }
        }
        dataModel = new DataTableModel(data, columnNames);
    }
    
    /**
     * Build and append table to form.
     */
    private void initDataTable() {  
        
        dataTable = new JTable(dataModel);
        
        // Add mouse listener for capturing double clcik events, accessing selected
        // data and relooding previously played game depending on file locaotion.
        dataTable.addMouseListener(new DataTableMouseAdapter(this));
        dataTable.getModel().addTableModelListener(this);
    }
    
    /**
     * Modify table columns style.
     */
    private void dataTableStyle() {
        
        dataTable.setBackground(Color.BLACK);
        dataTable.setAutoCreateRowSorter(true);
        dataTable.setDragEnabled(false);
        dataTable.setDoubleBuffered(true);
        dataTable.setForeground(new Color(240,240,240));
        dataTable.setFont(new Font(TABLE_FONT_FAMILY, Font.PLAIN, 14));
        dataTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dataTable.setSelectionBackground(new Color(80,92,92));
        dataTable.setCursor(new Cursor(Cursor.HAND_CURSOR));
        dataTable.setBorder(null);
        
        // Deal with column width & height.
        dataTable.setRowHeight(22);
        final int tableWidth = scrollPane.getWidth();
        dataTable.getColumnModel().getColumn(0).setPreferredWidth((tableWidth / 100) * 16);
        dataTable.getColumnModel().getColumn(1).setPreferredWidth((tableWidth / 100) * 6);
        dataTable.getColumnModel().getColumn(2).setPreferredWidth((tableWidth / 100) * 8);
        dataTable.getColumnModel().getColumn(3).setPreferredWidth((tableWidth / 100) * 42);
        dataTable.getColumnModel().getColumn(4).setPreferredWidth((tableWidth / 100) * 18);
        dataTable.getColumnModel().getColumn(5).setPreferredWidth((tableWidth / 100) * 6);
        dataTable.getColumnModel().getColumn(6).setPreferredWidth((tableWidth / 100) * 6);
        
        
        JTableHeader header;
        header = dataTable.getTableHeader();
        header.setFont(new Font(TABLE_FONT_FAMILY, Font.CENTER_BASELINE, 14));
        header.setBackground(Color.DARK_GRAY);
        header.setForeground(new Color(30,30,30));
        
        // Add table to scrollpane.
        scrollPane.add(dataTable);
        scrollPane.setViewportView(dataTable);
        scrollPane.getViewport().setBackground(Color.BLACK);
        scrollPane.getViewport().setBorder(null);
    }
    //</editor-fold>  
    
    //<editor-fold defaultstate="collapsed" desc="Getters & Setters">
    public void setSelectedDataFileDescription(final String selectedDataFileDescription) {
        this.selectedDataFileDescription = selectedDataFileDescription;
    }
    
    public String getSelectedDataFilePath() {
        return selectedDataFilePath;
    }

    public void setSelectedDataFilePath(final String selectedDataFilePath) {
        this.selectedDataFilePath = selectedDataFilePath;
    }
    //</editor-fold>  
    
}
